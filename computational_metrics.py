"""Computes computational metrics for linked open datasets.
"""

import os
from GraphDBWrapper import GraphDBWrapper
from RDFUnitWrapper import RDFUnitWrapper
import config


def computational_metrics(file_dataset):
    """Computes computational metrics for linked open datasets.

    Runs RDFUnit on datasets and generates reports in W3C Data Quality Vocabulary (DQV). Creates a new GraphDB
    repository and imports results for visualization.

    Please update config.py prior to using this function.

    Note: the function starts the data import on GraphDB, but does not wait for the import to finish. GraphDB may take some
    time to finish importing and generating diagrams depending on the size of the data.

    :param file_dataset: Absolute path to dataset
    :return: None
    """
    # RDFUnitWrapper object for running rdfunit and dqv-report
    rdfunit = RDFUnitWrapper(config.path_rdfunit, config.verbose)

    # Run rdfunit on data
    file_rdfunit_output = rdfunit.rdfunit(file_dataset)

    # Run dqv-report
    try:
        file_dqv_output = rdfunit.dqv_report(file_rdfunit_output)
    except Exception as err:
        print(err)

        # For testing purposes, continue on with DQV report generated by Dimitris
        file_dqv_output = os.path.join(config.path_rdfunit, 'data', 'results',
                                       '_media_casey_Data_Research_NCATS-DQ_Data_sider_effects.ttl.dqv_report.ttl')
        print('For testing purposes, trying to continue on with DQV report previously generated: ' + file_dqv_output)

    # GraphDB object for interacting with GraphDB REST API
    graphdb = GraphDBWrapper(config.url_graphdb, config.verbose)

    # Use the dataset name as the GraphDB repository ID
    filename_dataset = os.path.split(file_dataset)[1]
    repo_id = ''.join([c if c.isalnum() else '_' for c in filename_dataset])

    # Delete any existing repository with the same repository ID
    graphdb.delete_repo(repo_id)

    # Create a new repository
    repo_title = filename_dataset + ' Data Quality Validation'
    graphdb.create_repo(repo_id, repo_title)

    # Upload DQV report to repository
    url_dqv_report = 'file://' + file_dqv_output
    graphdb.upload_data_url(repo_id, url_dqv_report)

    # Also upload the DQV ontology so that GraphDB knows relationships between classes
    url_dqv_ontology = 'file://' + config.file_dqv_ontology
    graphdb.upload_data_url(repo_id, url_dqv_ontology)
